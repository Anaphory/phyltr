#!/usr/bin/env python
"""Phyltr

Usage:
    phyltr <command> [<args>]

The available phyltr commands are:
    cat         Convert file(s) to tree streams
    clades      List clade supports
    collapse    Collapse clades to named taxa
    delete      Delete specified taxa from trees
    nexus       Convert tree stream to NEXUS file
    pretty      Pretty print a tree (ASCII art)
    prune       Prune a tree down to specified taxa
    rename      Rename specified taxa
    rogue       Remove rogue taxon or taxons
    stat        Summary statistics on a set of trees
    sup         Add clade support information to a tree stream
    uniq        Merge trees with matching topologies

All commands can be abbreviated to their first three letters, e.g. running
"phyltr col" is the same as running "phyltr collapse".

Command specific help is availble via "phyltr <command> --help".
"""

import sys
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE,SIG_DFL) 

def usage():
    print __doc__

def main():

    if len(sys.argv) > 1:
        command = sys.argv.pop(1)
    else:
        command = "usage"

    if command == "cat":
        import phyltr.commands.cat as comm
    elif command in ("age", "ages"):
        import phyltr.commands.ages as comm
    elif command in ("cla", "clades"):
        import phyltr.commands.clades as comm
    elif command in ("col", "collapse"):
        import phyltr.commands.collapse as comm
    elif command in ("del", "delete"):
        import phyltr.commands.delete as comm
    elif command in ("nex", "nexus"):
        import phyltr.commands.nexus as comm
    elif command in ("pre", "pretty"):
        import phyltr.commands.pretty as comm
    elif command in ("pru", "prune"):
        import phyltr.commands.prune as comm
    elif command in ("ren", "rename"):
        import phyltr.commands.rename as comm
    elif command in ("rog", "rogue"):
        import phyltr.commands.rogue as comm
    elif command in ("sta", "stat"):
        import phyltr.commands.stat as comm
    elif command in ("sup", "support"):
        import phyltr.commands.support as comm
    elif command in ("uni", "uniq"):
        import phyltr.commands.uniq as comm
    elif command in ("help", "usage"):
        usage()
        sys.exit(0)

    sys.exit(comm.run())

if __name__ == "__main__":
    main()
